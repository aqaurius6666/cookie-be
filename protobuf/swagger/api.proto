syntax = "proto3";

package swagger;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "gopkg/cookie-be";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "Cookie API";
        version: "1.0";
        description: "api description";
        contact: {
            name: "Vu Nguyen";
            email: "aqaurius6666@gmail.com";
        };
    };
    base_path: "/api";

    schemes: [
        HTTPS,
        HTTP
    ];
    consumes: "application/json";
    produces: "application/json";
    // security_definitions: {
    //     security: {
    //         key: "api_key";
    //         value: {
    //             type: TYPE_API_KEY;
    //             in: IN_HEADER;
    //             name: "Authorization";
    //         };
    //     };
    // }
};

message User {
    int32 id = 1;
    string name = 2;
}

message Tag {
    int32 id = 1;
    string name = 2;
    bool is_required = 3;
}
message Pagination {
    int32 offset = 1;
    int32 limit = 2;
    int32 total = 3;
}
message Post {
    int32 id = 1;
    string title = 2;
    string content = 3;
    bool is_receipe = 4;
    User author = 5;
    repeated Tag tags = 6;
    string created_at = 7;
    string updated_at = 8;
    int32 upvote = 9;
    int32 downvote = 10;
    int32 cook_time = 11;
    repeated Question questions = 12;
}

message Question {
    int32 id = 1;
    string content = 2;
    repeated Tag tags = 3;
}

message UploadUrl {
    string url = 1;
    message UploadHeader {
        string key = 1;
        string value = 2;
    }
    repeated UploadHeader fields = 2; 
}

service CookieService {
    rpc GetPostById(GetPostByIdRequest) returns (GetPostByIdResponse) {
        option (google.api.http) = {
            get: "/post-by-id"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Post";
        };
    }

    rpc RandomQuestions(RandomQuestionsRequest) returns (RandomQuestionsResponse) {
        option (google.api.http) = {
            get: "/random-questions"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Post";
        };
    }

    rpc SuggestionPosts(SuggestionPostsRequest) returns (SuggestionPostsResponse) {
        option (google.api.http) = {
            get: "/suggestion-posts"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Post";
        };
    }

    rpc CreatePosts(CreatePostsRequest) returns (CreatePostsResponse) {
        option (google.api.http) = {
            post: "/posts"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Post";
        };
    }

    rpc UpdatePost(UpdatePostRequest) returns (UpdatePostResponse) {
        option (google.api.http) = {
            put: "/posts/{id}"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Post";
        };
    }

    rpc ListPosts(ListPostsRequest) returns (ListPostsResponse) {
        option (google.api.http) = {
            get: "/posts"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Post";
        };
    }

    rpc ListPostsMe(ListPostsMeRequest) returns (ListPostsMeResponse) {
        option (google.api.http) = {
            get: "/posts/me"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Post";
        };
    }

    rpc GetUploadUrl(GetUploadUrlRequest) returns (GetUploadUrlResponse) {
        option (google.api.http) = {
            post: "/upload/presigned-upload"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Upload";
        };
    }
}


message GetPostByIdRequest {
    int32 id = 1;
}

message GetPostByIdResponse {
    bool success = 1;
    int32 status = 2;
    string message = 3;
    Post data = 4;
}

message SuggestionPostsRequest {
    // For example: tags[]=1&tags[]=2&tags[]=3
    string tags = 1;
    int32 limit = 2;
    int32 offset = 3;
}

message SuggestionPostsResponse {
    bool success = 1;
    int32 status = 2;
    string message = 3;
    repeated Post data = 4;
}

message RandomQuestionsRequest {
    int32 number = 1;
}

message RandomQuestionsResponse {
    bool success = 1;
    int32 status = 2;
    string message = 3;
    repeated Question data = 4;
}

message CreatePostsRequest {
    string title = 1;
    string content = 2;
    bool is_receipe = 3;
    repeated int32 tag_ids = 4;
    int32 cook_time = 5;
}

message CreatePostsResponse {
    bool success = 1;
    int32 status = 2;
    string message = 3;
    Post data = 4;
}

message UpdatePostRequest {
    int32 id = 1;
    string title = 2;
    string content = 3;
    bool is_receipe = 4;
    repeated int32 tag_ids = 5;
    int32 cook_time = 6;
}

message UpdatePostResponse {
    bool success = 1;
    int32 status = 2;
    string message = 3;
    Post data = 4;
}

message ListPostsRequest {
    int32 limit = 1;
    int32 offset = 2;
}

message ListPostsResponse {
    bool success = 1;
    int32 status = 2;
    string message = 3;
    message PostPagination {
        Pagination pagination = 1;
        repeated Post posts = 2;
    }
    PostPagination data = 4;
}


message ListPostsMeRequest {
    int32 limit = 1;
    int32 offset = 2;
}

message ListPostsMeResponse {
    bool success = 1;
    int32 status = 2;
    string message = 3;
    message PostPagination {
        Pagination pagination = 1;
        repeated Post posts = 2;
    }
    PostPagination data = 4;
}

message GetUploadUrlRequest {
    string file_name = 1;
}

message GetUploadUrlResponse {
    bool success = 1;
    int32 status = 2;
    string message = 3;
    UploadUrl data = 4;
}